function! s:setupNoWrapping()
  set wrap
  set linebreak
  set textwidth=0
  set nolist
endfunction

function! s:setupTYPO3()
		" Indenting using tabs
		" http://vim.wikia.com/wiki/Indent_with_tabs,_align_with_spaces
		setlocal noexpandtab
		setlocal copyindent
		setlocal preserveindent
		setlocal softtabstop=0
		setlocal shiftwidth=4
		setlocal tabstop=2
endfunction


au BufNewFile,BufRead mozex.textarea.* setlocal filetype=typoscript
au BufNewFile,BufRead *.ts setlocal filetype=typoscript 
au BufNewFile,BufRead *setup.txt setlocal filetype=typoscript.| call s:setupNoWrapping()
au BufNewFile,BufRead *constants.txt setlocal filetype=typoscript.| call s:setupNoWrapping()
color desert
set guifont=Monaco:h13
set noantialias

map <F5> :python debugger_run()<cr>


au BufNewFile,BufRead */Resources/Private/*.html setlocal filetype=xml | call s:setupTYPO3()


" NERDTree tarda una eternidad en dejar usar VIM tras recuperar el foco...
let NERDTreeQuitOnOpen=1

" Disable phpcs and phpmd from Syntastic
let g:syntastic_php_checkers=['php']
"let g:syntastic_php_phpcs_args = "--standard=TYPO3CMS"
let g:phpqa_codesniffer_args = "--standard=TYPO3CMS"

" Don't run phpqa on write... TYPO3 files are really big and slow to process
let g:phpqa_run_on_write = 0


" php remove eol from end of file (TYPO3CMS phpcs req)
autocmd FileType php setlocal noeol binary fileformats="mac,unix,dos"

set wrap
set expandtab
set tabstop=2

autocmd FileType php call s:setupTYPO3()
autocmd FileType typoscript call s:setupTYPO3()

" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
  let spccol = repeat(' ', a:cols)
  let result = substitute(a:indent, spccol, '\t', 'g')
  let result = substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result = substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
  let savepos = getpos('.')
  let cols = empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction
command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)


set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files
